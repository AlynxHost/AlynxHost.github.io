<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blober</title>
    <style>
        *{
            margin: 0;
            padding: 0;
        }
        body{
            min-height: 100vh;
            background: #111;
        }
        canvas{
            display: block;
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            will-change: filter;
            transform: translate3d(0, 0, 0);
        }
     
       
    </style>
</head>
<body>
    <canvas></canvas>
    <svg>
        <defs>
          <filter id="goo">
            <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
            <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7" result="goo" />
            <feComposite in="SourceGraphic" in2="goo" operator="atop"/>
          </filter>
        </defs>
      </svg>

</body>
</html>
<script>
    /** @type {HTMLCanvasElement} */
    const canvas = document.querySelector('canvas');
    const ctx = canvas.getContext('2d');
    ctx.globalCompositeOperation = 'destination-over'
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let mouse = {x:undefined,y:undefined}
    let particlesArray = [];
    let drawing = false; 
    let hue = 0;
    let minSize = 1;
    let maxSize = 400;
    let angle = 0;
    class Particle {
        constructor(){
            this.x = mouse.x;
            this.y =  mouse.y;
            this.power = Math.random() * 0.08;
            this.size = Math.random() * 2;
            this.colorsArray =['#F44336','#FFEBEE','#FFCDD2','#EF9A9A','#E57373','#EF5350','#E53935','#D32F2F','#C62828','#B71C1C','#FF8A80','#FF5252','#FF1744','#D50000','#FCE4EC','#F8BBD0','#F48FB1','#F06292','#EC407A','#E91E63','#D81B60','#C2185B','#AD1457','#880E4F','#FF80AB','#FF4081','#F50057','#C51162','#F3E5F5','#E1BEE7','#CE93D8','#BA68C8','#AB47BC','#9C27B0','#8E24AA','#7B1FA2','#6A1B9A','#4A148C','#EA80FC','#E040FB','#D500F9','#AA00FF','#EDE7F6','#D1C4E9','#B39DDB','#9575CD','#7E57C2','#673AB7','#5E35B1','#512DA8','#4527A0','#311B92','#B388FF','#7C4DFF','#651FFF','#6200EA','#E8EAF6','#C5CAE9','#9FA8DA','#7986CB','#5C6BC0','#3F51B5','#3949AB','#303F9F','#283593','#1A237E','#8C9EFF','#536DFE','#3D5AFE','#304FFE','#E3F2FD','#BBDEFB','#90CAF9','#64B5F6','#42A5F5','#2196F3','#1E88E5','#1976D2','#1565C0','#0D47A1','#82B1FF','#448AFF','#2979FF','#2962FF','#E1F5FE','#B3E5FC','#81D4FA','#4FC3F7','#29B6F6','#03A9F4','#039BE5','#0288D1','#0277BD','#01579B','#80D8FF','#40C4FF','#00B0FF','#0091EA','#E0F7FA','#B2EBF2','#80DEEA','#4DD0E1','#26C6DA','#00BCD4','#00ACC1','#0097A7','#00838F','#6064','#84FFFF','#18FFFF','#00E5FF','#00B8D4','#E0F2F1','#B2DFDB','#80CBC4','#4DB6AC','#26A69A','#9688','#00897B','#00796B','#00695C','#004D40','#A7FFEB','#64FFDA','#1DE9B6','#00BFA5','#E8F5E9','#C8E6C9','#A5D6A7','#81C784','#66BB6A','#4CAF50','#43A047','#388E3C','#2E7D32','#1B5E20','#B9F6CA','#69F0AE','#00E676','#00C853','#F1F8E9','#DCEDC8','#C5E1A5','#AED581','#9CCC65','#8BC34A','#7CB342','#689F38','#558B2F','#33691E','#CCFF90','#B2FF59','#76FF03','#64DD17','#F9FBE7','#F0F4C3','#E6EE9C','#DCE775','#D4E157','#CDDC39','#C0CA33','#AFB42B','#9E9D24','#827717','#F4FF81','#EEFF41','#C6FF00','#AEEA00','#FFFDE7','#FFF9C4'];
            this.color = this.colorsArray[Math.floor(Math.random() * this.colorsArray.length)];
            this.speedX = Math.random() * 0.10 - 0.05;
            this.speedY = Math.random() * 0.10 - 0.05 ;
        }
        particlesUpdate(){
          
            this.speedX += Math.random() * 0.01 - 0.005;
            this.speedY += Math.random() * 0.01 - 0.005;
            this.x += this.speedX * this.power;
            this.y += this.speedY * this.power;
            this.power += 0.08;
    }
        particlesDraw(){
           
        
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, Math.PI * 2, false);
            ctx.fillStyle = this.color;
            ctx.fill();
            ctx.closePath();
          
           }
        }

    //Function for MouseMovement
    function mouseCords(e) {
        mouse.x = event.x;
        mouse.y = event.y;

    }
    //Function for Resize Event
    function clearFunc() {
        ctx.clearRect(0,0,canvas.width, canvas.height);
        particlesArray = [];
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    //Some Mouse Events
    addEventListener('mousedown', () => {drawing = true;})
    addEventListener('mouseup' , () => {drawing = false;})
    addEventListener('mousemove', mouseCords);
    // Resize Event
    addEventListener('resize', clearFunc);


 
    
    canvas.addEventListener('click', clickAnimation);
    function clickAnimation() {
       
        for(let i = 0; i < 500; i++){
            particlesArray.push(new Particle());
        
        }
    
    }

    

    function handleAnimation() {
        for(let i = 0; i < particlesArray.length; i++){            
            particlesArray[i].particlesDraw();
            particlesArray[i].particlesUpdate();   

            if(particlesArray[i].x + particlesArray[i].size > canvas.width ||
                particlesArray[i].x - particlesArray[i].size < 0 ||
                particlesArray[i].y + particlesArray[i].size > canvas.height || 
                particlesArray[i].y - particlesArray[i].size < 0){
            particlesArray.splice(i, 1);
            i--;
        }
       
    }
       
}

    function animateParticles() {
        
        ctx.fillStyle = 'rgba(0,0,0,0.02)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        handleAnimation();
        requestAnimationFrame(animateParticles);
        angle+=0.1;
        hue++;
    }

    animateParticles();
</script>
